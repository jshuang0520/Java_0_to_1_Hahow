/**


---------------------------------------------------
-------------------------
Extends 繼承
「In Java, 類別不能多重繼承」
-------------------------

1. Java裡，一個子類別，不能繼承兩個以上的父類別


public class B extends A{
    // some codes here...
}

---------------------------------------------------



---------------------------------------------------
-------------------------
Polymorphism 多型
-------------------------

1. 多型 即 父類別的 reference 可以指到子類別的物件

public class B extends A{
    // some codes here
}

// 這就是多型，因為 a 的 Type 是 A，但他是透過 B() 去 new 出實體物件來的！
A a = new B(); 




--
// 為什麼要用 Arrays.copyOf()
// 單元5-1_String_Array.java - 影片 12:29 物件的參考(reference) 

* 物件的 參考(reference) 與 實體(instance) 是分開存放的
* 在記憶體儲存的部分，分為 Stack & Heap 兩個地方
* Heap 儲存 物件實體（真實資料的內容）
* Stack 儲存 「Heap裡面那些實體的位址」
* // Java 和 C 不同，C 可以透過指標(pointer)或其他的方式去存取記憶體/控制記憶體的位置
* // 但在 Java 裡面卻不能碰到記憶體的位置，所以稱之為 reference
* 但請注意，在Java讀到的reference也不會是記憶體裡真實的位置，而是指向Heap裡的位置 
*  
* =============================================================
* 所以當透過 var1 去把 1 改成 2 時， var2 的值也會被改變
* 因為這兩個變數的 reference 都指向同一個實體！！！！！！！！！！！
*        Stack          Heap (儲存 物件實體（真實資料的內容）)
* 
*        var1   ------->  1 (the real value)
*                     |
*        var2   ______|
* =============================================================



* int[] num2 = num1; 
* 16:17 這一行的意思是：我把num1這個物件的reference指派給num2
* 所以在做完這一行之後，num1和num2的 reference 都指向同一個實體物件，存在Heap上！！

---------------------------------------------------


---------------------------------------------------
-------------------------
Casting 轉型
-------------------------

1. 向上轉型 - 將子類別的物件傳給父類別（向父類別轉型）
2. 向下轉型 - 將父類別的物件傳給子類別（向子類別強制轉型，需要加小括號(裡面寫想要強制轉成的(子類別的)Type)）


public class B extends A {
    // A 是父類別， B 是子類別

    // (1) 向上轉型 - 將子類別的物件傳給父類別（向父類別轉型）
    B b = new B(); // 原本是子類別B的資料型態；實際上的「物件由子類別B實現」
    A a = b;       // 向上轉型成父類別A的資料型態

    // (2) 向下轉型 - 將父類別的物件傳給子類別（向子類別強制轉型，需要加小括號()）
    A a = new B(); // 原本是父類別B的資料型態；實際上的「物件由子類別B實現」
    B b = (B)a;    // 向下轉型成子類別B的資料型態 // 向下轉型 - 將父類別的物件傳給子類別；強制轉型時，前方加上小括號(裡面寫想要強制轉成的(子類別的)Type)



    // 結論：不管物件中間有被向上轉型或向下轉型，要看最開始實際上物件是由哪一個類別實現的，之後所使用的屬性和方法就是用那個類別的
}

---------------------------------------------------


---------------------------------------------------
-------------------------

-------------------------


---------------------------------------------------
*/